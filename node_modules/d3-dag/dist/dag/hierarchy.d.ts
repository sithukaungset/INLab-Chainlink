/**
 * Before you can compute a DAG layout, you need a DAG structure.  If your data
 * is already in a DAG structure, you can use the [[hierarchy]] method to
 * generate a default [[HierarchyOperator]] which can then be used to transform
 * your data into a [[Dag]].
 *
 * @packageDocumentation
 */
import { Dag, DagNode } from "./node";
/**
 * The interface for getting the node id from data. The function must return an
 * unique id for each piece of data, but the same id if called twice on the
 * same data. Ids cannot contain the null character `'\0'`.
 */
interface IdOperator<NodeDatum> {
    (d: NodeDatum): string;
}
/**
 * The interface for getting child data from node data. This function must
 * return data for every child given the data for the current node. `i` will
 * increment for each node processed.
 */
interface ChildrenOperator<NodeDatum> {
    (d: NodeDatum, i: number): NodeDatum[] | undefined;
}
/**
 * The interface for getting children data and associated link data from node
 * data. This function must return data for every child of the given node, and
 * data for link between the two. `i` will increment for each node processesed.
 */
interface ChildrenDataOperator<NodeDatum, LinkDatum> {
    (d: NodeDatum, i: number): [NodeDatum, LinkDatum][] | undefined;
}
/**
 * What gets returned by [[childrenData]]() when [[children]] is set.
 */
interface WrappedChildrenOperator<NodeDatum, Children extends ChildrenOperator<NodeDatum> = ChildrenOperator<NodeDatum>> extends ChildrenDataOperator<NodeDatum, undefined> {
    (d: NodeDatum, i: number): [NodeDatum, undefined][];
    wrapped: Children;
}
/**
 * What gets returned by [[children]]() when [[childrenData]] is set.
 */
interface WrappedChildrenDataOperator<NodeDatum, LinkDatum, ChildrenData extends ChildrenDataOperator<NodeDatum, LinkDatum> = ChildrenDataOperator<NodeDatum, LinkDatum>> extends ChildrenOperator<NodeDatum> {
    (d: NodeDatum, i: number): NodeDatum[];
    wrapped: ChildrenData;
}
/**
 * The operator that constructs a [[Dag]] from hierarchy data.
 */
export interface HierarchyOperator<NodeDatum, LinkDatum, Id extends IdOperator<NodeDatum> = IdOperator<NodeDatum>, Children extends ChildrenOperator<NodeDatum> = ChildrenOperator<NodeDatum>, ChildrenData extends ChildrenDataOperator<NodeDatum, LinkDatum> = ChildrenDataOperator<NodeDatum, LinkDatum>> {
    /**
     * Construct a DAG from the specified root nodes.
     * Each root node must be an object representing a root node.
     * For example:
     *
     * ```json
     * {
     *   "id": "Eve",
     *     "children": [
     *     {
     *       "id": "Cain"
     *     },
     *     {
     *       "id": "Seth",
     *       "children": [
     *       {
     *         "id": "Enos"
     *       },
     *       {
     *         "id": "Noam"
     *       }
     *       ]
     *     },
     *     {
     *       "id": "Abel"
     *     },
     *     {
     *       "id": "Awan",
     *       "children": [
     *       {
     *         "id": "Enoch"
     *       }
     *       ]
     *     },
     *     {
     *       "id": "Azura"
     *     }
     *   ]
     * }
     * ```
     *
     * Node ids must be unique, and can't contain the null character `'\0'`.
     */
    (...data: NodeDatum[]): Dag<DagNode<NodeDatum, LinkDatum>>;
    /**
     * Sets the id accessor to the given [[IdOperator]] and returns this
     * [[HierarchyOperator]]. The default operator is:
     *
     * ```js
     * function id(d) {
     *   return d.id;
     * }
     * ```
     */
    id<NewId extends IdOperator<NodeDatum>>(id: NewId): HierarchyOperator<NodeDatum, LinkDatum, NewId, Children, ChildrenData>;
    /** Get the current id accessor. */
    id(): Id;
    /**
     * Sets the children accessor to the given [[ChildrenOperator]] and returns
     * this [[HierarchyOperator]]. The default operator is:
     *
     * ```js
     * function children(d) {
     *   return d.children;
     * }
     * ```
     */
    children<NewChildren extends ChildrenOperator<NodeDatum>>(ids: NewChildren): HierarchyOperator<NodeDatum, undefined, Id, NewChildren, WrappedChildrenOperator<NodeDatum, NewChildren>>;
    /**
     * Gets the current [[ChildrenOperator]], If [[childrenData]] was specified,
     * this will return a wrapped version that returns only the children of that
     * operator.
     */
    children(): Children;
    /**
     * Sets the childrenData accessor to the given [[ChildrenDataOperator]] and
     * returns this [[HierarchyOperator]].
     */
    childrenData<NewLinkDatum, NewChildrenData extends ChildrenDataOperator<NodeDatum, NewLinkDatum>>(data: NewChildrenData): HierarchyOperator<NodeDatum, NewLinkDatum, Id, WrappedChildrenDataOperator<NodeDatum, NewLinkDatum, NewChildrenData>, NewChildrenData>;
    /**
     * Get the current childrenData operator. If [[children]] was specified, this
     * will return a wrapped version that returns undefined data.
     */
    childrenData(): ChildrenData;
}
/**
 * Constructs a new [[HierarchyOperator]] with default settings.
 *
 * By default ids will be pulled from the `id` property and children will be
 * pulled from the `children` property. Since `children` being undefined is
 * valid, forgetting to set children properly will result in a dag with only a
 * single node.
 */
export declare function hierarchy<NodeDatum>(...args: never[]): HierarchyOperator<NodeDatum, undefined, IdOperator<NodeDatum>, ChildrenOperator<NodeDatum>, WrappedChildrenOperator<NodeDatum, ChildrenOperator<NodeDatum>>>;
export {};
