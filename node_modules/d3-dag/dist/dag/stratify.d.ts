/**
 * You can rearrange tabularesque data into a [[Dag]] using [[stratify]], which
 * will create a default [[StratifyOperator]].
 *
 * @packageDocumentation
 */
import { Dag, DagNode } from "./node";
/**
 * The interface for getting the node id from data. The function must return an
 * unique id for each piece of data, but the same id if called twice on the
 * same data. Ids cannot contain the null character `'\0'`.
 *
 * `i` will increment in the order nodes are processed.
 */
interface IdOperator<NodeDatum> {
    (d: NodeDatum, i: number): string;
}
/**
 * The interface for getting the parent ids from data. This must return an
 * array of the ids of every parent of this node. `i` will increment in the
 * order nodes are processed.
 */
interface ParentIdsOperator<NodeDatum> {
    (d: NodeDatum, i: number): string[] | undefined;
}
/**
 * The interface for getting the parent ids and link data from the current node
 * data. This must return an array of parent ids coupled with data for the link
 * between this node and the parent id.
 */
interface ParentDataOperator<NodeDatum, LinkDatum> {
    (d: NodeDatum, i: number): [string, LinkDatum][] | undefined;
}
/**
 * What gets returned by [[parentData]]() when [[parentIds]] is set.
 */
interface WrappedParentIdsOperator<NodeDatum, ParentIds extends ParentIdsOperator<NodeDatum>> extends ParentDataOperator<NodeDatum, undefined> {
    (d: NodeDatum, i: number): [string, undefined][];
    wrapped: ParentIds;
}
/**
 * What gets returned by [[parentIds]]() when [[parentData]] is set.
 */
interface WrappedParentDataOperator<NodeDatum, LinkDatum, ParentData extends ParentDataOperator<NodeDatum, LinkDatum>> extends ParentIdsOperator<NodeDatum> {
    (d: NodeDatum, i: number): string[];
    wrapped: ParentData;
}
/**
 * The operator that constructs a [[Dag]] from stratified tabularesque data.
 */
export interface StratifyOperator<NodeDatum, LinkDatum, Id extends IdOperator<NodeDatum> = IdOperator<NodeDatum>, ParentIds extends ParentIdsOperator<NodeDatum> = ParentIdsOperator<NodeDatum>, ParentData extends ParentDataOperator<NodeDatum, LinkDatum> = ParentDataOperator<NodeDatum, LinkDatum>> {
    /**
     * Construct a dag from the specified `data`. The data should be an array
     * of data elements that contain info about their parents' ids. For example:
     *
     * ```json
     * [
     *   {
     *     "id": "Eve"
     *   },
     *   {
     *     "id": "Cain",
     *     "parentIds": ["Eve"]
     *   },
     *   {
     *     "id": "Seth",
     *     "parentIds": ["Eve"]
     *   },
     *   {
     *     "id": "Enos",
     *     "parentIds": ["Seth"]
     *   },
     *   {
     *     "id": "Noam",
     *     "parentIds": ["Seth"]
     *   },
     *   {
     *     "id": "Abel",
     *     "parentIds": ["Eve"]
     *   },
     *   {
     *     "id": "Awan",
     *     "parentIds": ["Eve"]
     *   },
     *   {
     *     "id": "Enoch",
     *     "parentIds": ["Eve"]
     *   },
     *   {
     *     "id": "Azura",
     *     "parentIds": ["Eve"]
     *   }
     * ]
     * ```
     */
    (data: NodeDatum[]): Dag<DagNode<NodeDatum, LinkDatum>>;
    /**
     * Sets the id accessor to the given [[IdOperator]] and returns this
     * [[StratifyOperator]]. The default operator is:
     *
     * ```js
     * function id(d) {
     *   return d.id;
     * }
     * ```
     */
    id<NewId extends IdOperator<NodeDatum>>(id: NewId): StratifyOperator<NodeDatum, LinkDatum, NewId, ParentIds, ParentData>;
    /**
     * Gets the current id accessor.
     */
    id(): Id;
    /**
     * Sets the parentIds accessor to the given [[ParentIdsOperator]]
     * and returns this [[StratifyOperator]]. The default operator is:
     *
     * ```js
     * function parentIds(d) {
     *   return d.parentIds;
     * }
     * ```
     */
    parentIds<NewParentIds extends ParentIdsOperator<NodeDatum>>(ids: NewParentIds): StratifyOperator<NodeDatum, undefined, Id, NewParentIds, WrappedParentIdsOperator<NodeDatum, NewParentIds>>;
    /**
     * Gets the current parent ids accessor.  If [[parentData]] was passed, the
     * returned function will wrap that to just return the ids.
     */
    parentIds(): ParentIds;
    /**
     * Sets the parentData accessor to the given [[ParentDataOperator]] and
     * returns this [[StratifyOperator]].
     */
    parentData<NewLinkDatum, NewParentData extends ParentDataOperator<NodeDatum, NewLinkDatum>>(data: NewParentData): StratifyOperator<NodeDatum, NewLinkDatum, Id, WrappedParentDataOperator<NodeDatum, NewLinkDatum, NewParentData>, NewParentData>;
    /**
     * Gets the current parentData accessor. If [[parentIds]] was passed, this
     * will wrap that to just return the ids with `undefined` data.
     */
    parentData(): ParentData;
}
/**
 * Constructs a new [[StratifyOperator]] with the default settings.
 */
export declare function stratify<NodeDatum>(...args: never[]): StratifyOperator<NodeDatum, undefined, IdOperator<NodeDatum>, ParentIdsOperator<NodeDatum>, WrappedParentIdsOperator<NodeDatum, ParentIdsOperator<NodeDatum>>>;
export {};
