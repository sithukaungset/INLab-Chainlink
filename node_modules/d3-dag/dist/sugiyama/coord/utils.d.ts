import { HorizableNode, Separation } from ".";
import { DagNode } from "../../dag/node";
import { DummyNode } from "../dummy";
import { SafeMap } from "../../utils";
export declare function coordSingleLayer<NodeType extends DagNode>(layer: ((NodeType & HorizableNode) | DummyNode)[], sep: Separation<NodeType>): void;
export declare function solve(Q: number[][], c: number[], A: number[][], b: number[], meq?: number): number[];
export declare function indices<NodeType extends DagNode>(layers: (NodeType | DummyNode)[][]): SafeMap<string, number>;
export declare function init<NodeType extends DagNode>(layers: (NodeType | DummyNode)[][], inds: SafeMap<string, number>, separation: Separation<NodeType>): [number[][], number[], number[][], number[]];
export declare function minDist(Q: number[][], pind: number, cind: number, coef: number): void;
export declare function minBend(Q: number[][], pind: number, nind: number, cind: number, coef: number): void;
export declare function layout<NodeType extends DagNode>(layers: ((NodeType & HorizableNode) | DummyNode)[][], inds: SafeMap<string, number>, solution: number[]): void;
