import { DagNode } from "../../dag/node";
/**
 * This accessor positions nodes to minimize aspect of curvature and distance
 * between nodes. The coordinates are assigned by solving a quadratic program,
 * with weights for various parts of the objective function. Quadratic programs
 * can take a while to solve, but this will likely produce the most appealing
 * output.
 *
 * @packageDocumentation
 */
import { Operator } from ".";
/**
 * The operator for quadratically optimized coordinates. Two of the weight
 * settings allow specifying a different weight for regular nodes, and dummy
 * nodes (longer edges). The total weight for that node type must be greater
 * than zero otherwise the optimization will not be well formed.
 */
export interface QuadOperator<NodeType extends DagNode> extends Operator<NodeType> {
    /**
     * Set the weight for verticality. Higher weights mean connected nodes should
     * be closer together, or corollarily edges should be closer to vertical
     * lines. There are two different weights, [ *regular nodes*, *dummy nodes*
     * ], the weight for a pair of connected nodes the sum of the weight value
     * for each node depending on whether not that node is a dummy node. Setting
     * them both to positive means all lines should ve roughly vertical, while
     * setting a weight to zero doesn't peanalize edges between those types of
     * nodes.
     */
    vertical(val: [number, number]): QuadOperator<NodeType>;
    /**
     * Get the current vertical weights which defaults to [1, 0]. By setting the
     * weight of dummy nodes to zero, longer edges aren't penalized to be
     * straighter than short edges.
     */
    vertical(): [number, number];
    /**
     * Set the weight for curviness. Higher weights mean an edge going through a node type should be roughly straight.
     * There are two different weights, [ *regular nodes*, *dummy nodes*
     * ], that impact the curvature through those node types. Setting regular
     * nodes to positive will create a type of flow of edges going through a
     * node, while setting dummy nodes will enforce the longer edges should try
     * to be stright.
     */
    curve(val: [number, number]): QuadOperator<NodeType>;
    /**
     * Get the current vertical weights which defaults to [0, 1]. By setting the
     * weight of non-dummy nodes to zero, we only care about the curvature of
     * edges, not lines that pass through nodes.
     */
    curve(): [number, number];
    /**
     * Set the weight that for how close different disconnected components should
     * be. The higher the weight, the more different components will be close to
     * each other at the expense of other objectives. This needs to be greater
     * than zero to make the objective sound when there are disconnected
     * components, but otherwise should probably be very small.
     */
    component(val: number): QuadOperator<NodeType>;
    /** Get the current component weight, which defaults to one. */
    component(): number;
}
/** Create a default [[QuadOperator]]. */
export declare function quad<NodeType extends DagNode>(...args: never[]): QuadOperator<NodeType>;
