/**
 * This layering operator assigns every node a layer such that the longest path
 * (the height) is minimized.  This often results in very wide graphs, but is
 * also fast to compute.
 *
 * Create a new [[LongestPathOperator]] with [[longestPath]].
 *
 * <img alt="longest path example" src="media://longest_path.png" width="400">
 *
 * @packageDocumentation
 */
import { DagNode } from "../../dag/node";
import { Operator } from ".";
export interface LongestPathOperator<NodeType extends DagNode> extends Operator<NodeType> {
    /**
     * Set whether longest path should go top down or not. If set to true (the
     * default), longest path will start at the top, putting nodes as close to
     * the top as possible.
     */
    topDown(val: boolean): LongestPathOperator<NodeType>;
    /** Get whether or not this is using topDown. */
    topDown(): boolean;
}
/** Create a default [[LongestPathOperator]]. */
export declare function longestPath<NodeType extends DagNode>(...args: never[]): LongestPathOperator<NodeType>;
