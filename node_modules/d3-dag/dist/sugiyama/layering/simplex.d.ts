/**
 * Assigns every node a layer with the goal of minimizing the number of dummy
 * nodes (long edges) inserted. Computing this layering requires solving an
 * integer linear program, which may take a long time, although in practice is
 * often quite fast. This is often known as the network simplex layering from
 * [Gansner et al. [1993]](https://www.graphviz.org/Documentation/TSE93.pdf).
 *
 * Create a new [[SimplexOperator]] with [[simplex]].
 *
 * <img alt="simplex example" src="media://simplex.png" width="400">
 *
 * @packageDocumentation
 */
import { DagNode } from "../../dag/node";
import { Operator, RankAccessor } from ".";
export interface SimplexOperator<NodeType extends DagNode, Rank extends RankAccessor<NodeType> = RankAccessor<NodeType>> extends Operator<NodeType> {
    /**
     * Set the [[RankAccessor]]. Any node with a rank assigned will have a second
     * ordering enforcing ordering of the ranks. Note, this can cause the simplex
     * optimization to be ildefined, and may result in an error during layout.
     */
    rank<NewRank extends RankAccessor<NodeType>>(newRank: NewRank): SimplexOperator<NodeType, NewRank>;
    /**
     * Get the current [[RankAccessor]].
     */
    rank(): Rank;
    /**
     * Setting *debug* to true will cause the simplex solver to use more human
     * readable names, which can help debug optimizer errors. These names will
     * cause other types of failures for poorly constructed node ids, and is
     * therefore disabled by default.
     */
    debug(val: boolean): SimplexOperator<NodeType, Rank>;
    /** Get the current debug value. */
    debug(): boolean;
}
/** Create a default [[SimplexOperator]]. */
export declare function simplex<NodeType extends DagNode>(...args: never[]): SimplexOperator<NodeType>;
