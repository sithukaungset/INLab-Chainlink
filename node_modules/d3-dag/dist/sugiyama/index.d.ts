/**
 * This module contains methods for constructing a layered representation of
 * the DAG meant for visualization.  The algorithm is based off ideas presented
 * in K. Sugiyama et al. [1979], but described by [S.
 * Hong](http://www.it.usyd.edu.au/~shhong/fab.pdf).  The sugiyama layout can
 * be configured with different algorithms for each stage of the layout.  For
 * each stage there should be adecuate choices for methods that balance speed
 * and quality for your desired layout, but any function that meets the
 * interface for that stage is valid, but custom methods can also be provided,
 * assuming they do what's necessary in that step.
 *
 * The method [[sugiyama]] is used to create a new [[SugiyamaOperator]]. This
 * can be customized with all of the methods available, but in particular the
 * method is broken down into three steps:
 * 1. [["sugiyama/layering/index" | layering]] - in this step, every node is
 *    assigned an integer later such that children are guaranteed to have
 *    higher layers than their parents.
 * 2. [["sugiyama/decross/index" | decrossing]] - in the step, nodes in each
 *    layer are reordered to minimize the number of crossings.
 * 3. [["sugiyama/coord/index" | coordinate assignment]] - in the step, the
 *    nodes are assigned x and y coordinates that respect their layer, and
 *    layer ordering.
 *
 * @packageDocumentation
 */
import { Dag, DagNode, DagRoot } from "../dag/node";
import { Operator as CoordOperator, Separation } from "./coord";
import { Operator as LayeringOperator } from "./layering";
import { QuadOperator } from "./coord/quad";
import { SimplexOperator } from "./layering/simplex";
import { TwoLayerOperator } from "./decross/two-layer";
import { Operator as DecrossOperator } from "./decross";
import { MedianOperator } from "./twolayer/median";
/**
 * The added attributes to the [[Dag]] once the [[SugiyamaOperator]] is called.
 */
export interface SugiyamaNode {
    layer: number;
    x: number;
    y: number;
}
/**
 * The operator used to layout a [[Dag]] using the sugiyama method.
 */
export interface SugiyamaOperator<NodeType extends DagNode, Layering extends LayeringOperator<NodeType> = LayeringOperator<NodeType>, Decross extends DecrossOperator<NodeType> = DecrossOperator<NodeType>, Coord extends CoordOperator<NodeType> = CoordOperator<NodeType>, NodeSized extends boolean = false, Sep extends Separation<NodeType> = Separation<NodeType>> {
    /**
     * Layout the [[Dag]] using the currently configured operator. The returned
     * DAG nodes will have added properties from [[SugiyamaNode]]. In addition,
     * each link will have points reset and assigned.
     */
    (dag: NodeType): NodeType & SugiyamaNode;
    (dag: DagRoot<NodeType>): DagRoot<NodeType & SugiyamaNode>;
    (dag: Dag<NodeType>): Dag<NodeType & SugiyamaNode>;
    /**
     * Set the [[LayeringOperator]]. See [["sugiyama/layering/index" |
     * layerings]] for more information about proper operators and a description
     * of the built in operators. The default value is [[simplex]].
     */
    layering<NewLayering extends LayeringOperator<NodeType>>(layer: NewLayering): SugiyamaOperator<NodeType, NewLayering, Decross, Coord, NodeSized, Sep>;
    /**
     * Get the current [[LayeringOperator]].
     */
    layering(): Layering;
    /**
     * Set the [[DecrossOperator]]. See [["sugiyama/decross/index" |
     * decrossings]] for more information about proper operators and a description
     * of the built in operators. The default value is [[twoLayer]].
     */
    decross<NewDecross extends DecrossOperator<NodeType>>(dec: NewDecross): SugiyamaOperator<NodeType, Layering, NewDecross, Coord, NodeSized, Sep>;
    /**
     * Get the current [[DecrossOperator]].
     */
    decross(): Decross;
    /**
     * Set the [[CoordOperator]]. See [["sugiyama/coord/index" | coordinate
     * assignments]] for more information about proper operators and a
     * description of the built in operators. The default value is [[quad]].
     */
    coord<NewCoord extends CoordOperator<NodeType>>(crd: NewCoord): SugiyamaOperator<NodeType, Layering, Decross, NewCoord, NodeSized, Sep>;
    /**
     * Get the current [[CoordOperator]].
     */
    coord(): Coord;
    /**
     * Sets the sugiyama layout's size to the specified two-element array of
     * numbers [ *width*, *height* ] and returns this [[SugiyamaOperator]].  When
     * [[size]] is set, the minimum coordinate of every node is 0, and the
     * maximum *x* and *y* coordinates are *width* and *height* respectively. If
     * the DAG only has one node vertically or horizontally, it will be centered.
     */
    size(sz: [number, number]): SugiyamaOperator<NodeType, Layering, Decross, Coord, false, Sep>;
    /**
     * Get the current layout size, which defaults to [1, 1]. The return value
     * will be null if the layout is [[nodeSize]]d.
     */
    size(): NodeSized extends true ? null : [number, number];
    /**
     * Sets this sugiyama layout's nodeSize to the specified two-element array of
     * numbers [ *nodeWidth*, *nodeHeight* ] and returns this
     * [[SugiyamaOperator]].  When [[nodeSize]] is set, the minimum coordinate of
     * every node is 0, parents and children are at least *nodeHeight* appart,
     * and neighboring nodes in the same layer are approximately *nodeWidth*
     * apart, in actuality this just sets the width to *nodeWidth* times the
     * maximum number of nodes in a layer less one. If a constant separation is
     * used, then it's no longer approximate. This is done because the way to
     * handle nodes with a separation of zero, or dummy nodes is not clear.  If
     * the DAG only has one node vertically or horizontally, it will be centered.
     */
    nodeSize(sz: [number, number]): SugiyamaOperator<NodeType, Layering, Decross, Coord, true, Sep>;
    /**
     * Get the current layout nodeSize, which defaults to `null`. The return value
     * will be null if the layout is [[size]]d.
     */
    nodeSize(): NodeSized extends true ? [number, number] : null;
    /**
     * Sets the separation accessor to the specified [[Separation]] and returns this
     * [[SugiyamaOperator]].  The default separation accessor looks like:
     *
     * ```js
     * function separation(a, b) {
     *   return +!(a instanceof SugiDummyNode) + +!(b instanceof SugiDummyNode);
     * }
     * ```
     *
     * The separation accessor function takes two adjacent dag nodes and sets
     * their relative separation, thus any constant function will produce the
     * same results. Another other common setting is:
     *
     * ```js
     * function separation(a, b) {
     *   return 1;
     * }
     * ```
     *
     * which gives edges the same spacing as normal nodes.
     */
    separation<NewSep extends Separation<NodeType>>(sep: NewSep): SugiyamaOperator<NodeType, Layering, Decross, Coord, NodeSized, NewSep>;
    /**
     * Gets the current separation accessor.
     */
    separation(): Sep;
    /**
     * Sets sugiyama debug to *deb*. If debug is true, dummy nodes will be given
     * more human readable ids, but this can cause conflicts with poorly chosen
     * ids, so it it disabled by default.
     */
    debug(deb: boolean): SugiyamaOperator<NodeType, Layering, Decross, Coord, NodeSized, Sep>;
    /**
     * Gets the current debug value.
     */
    debug(): boolean;
}
/**
 * Construct a new [[SugiyamaOperator]] with the default settings.
 */
export declare function sugiyama<NodeType extends DagNode>(...args: never[]): SugiyamaOperator<NodeType, SimplexOperator<NodeType>, TwoLayerOperator<NodeType, MedianOperator<NodeType>>, QuadOperator<NodeType>, false, Separation<NodeType>>;
