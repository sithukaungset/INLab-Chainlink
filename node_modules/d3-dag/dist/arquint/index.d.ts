/**
 * This layout algorithm treats nodes not as points (i.e. producing x & y
 * coordinates) but as rectangles. An accessor is supplied to extract a
 * *heightRatio* from each node, specifying its height in comparison to other
 * nodes. The implementation was contributed by the author [L.
 * Arquint](https://linardarquint.com) and provides different algorithms to
 * distribute the nodes along the x-axis.
 *
 * In the following example, the default options were used and *node*.heightRatio was set to Number(*node*.id)+1:
 * <img alt="arquint example" src="media://arquint.png" width="400">
 *
 * @packageDocumentation
 */
import { Dag, DagNode, DagRoot } from "../dag/node";
import { Operator as ColumnOperator } from "./column";
import { ColumnSeparation, ColumnWidth, Operator as CoordOperator, IndexedNode } from "./coord";
import { ComplexOperator } from "./column/complex";
import { Operator as LayeringOperator } from "../sugiyama/layering";
import { LongestPathOperator } from "../sugiyama/layering/longest-path";
import { SpreadOperator } from "./coord/spread";
import { TwoLayerOperator } from "../sugiyama/decross/two-layer";
import { Operator as DecrossOperator } from "../sugiyama/decross";
import { DummyNode } from "../arquint/dummy";
import { MeanOperator } from "../sugiyama/twolayer/mean";
/** The operator that gets a height ratio from a node. */
export interface HeightRatio<NodeType extends DagNode> {
    (node: NodeType | DummyNode): number;
}
/**
 * An inter layer accessor takes a layer and its index and returns the relative
 * distance to the previous layer. It is not called for the first layer,
 * because it does not have a previous layer.
 */
export interface LayerSeparation<NodeType extends DagNode> {
    (topLayer: (NodeType | DummyNode)[], bottomLayer: (NodeType | DummyNode)[], index: number): number;
}
/** @internal */
interface LayeredNode {
    layer: number;
}
/**
 * The properties that are applied to a node after running [[Operator]].
 */
export interface ArquintNode extends LayeredNode, IndexedNode {
    y0: number;
    y1: number;
    x0: number;
    x1: number;
}
export interface Operator<NodeType extends DagNode, Layering extends LayeringOperator<NodeType> = LayeringOperator<NodeType>, Decross extends DecrossOperator<NodeType> = DecrossOperator<NodeType>, Column extends ColumnOperator<NodeType> = ColumnOperator<NodeType>, Coord extends CoordOperator<NodeType> = CoordOperator<NodeType>, LayerSep extends LayerSeparation<NodeType> = LayerSeparation<NodeType>, ColWidth extends ColumnWidth = ColumnWidth, ColSep extends ColumnSeparation = ColumnSeparation, HeightRat extends HeightRatio<NodeType> = HeightRatio<NodeType>> {
    /**
     * Lays out the specified DAG while respecting (vertical) *node*.heightRatio
     * together with (vertical) [[LayerSeparation | inter layer separation]],
     * (horizontal) [[ColumnWidth | column width]], as well as (horizontal)
     * [[ColumnSeparation | column separation]].
     */
    (dag: NodeType): NodeType & ArquintNode;
    (dag: DagRoot<NodeType>): DagRoot<NodeType & ArquintNode>;
    (dag: Dag<NodeType>): Dag<NodeType & ArquintNode>;
    /**
     * Sets this arquint layout's size to the specified two-element array of
     * numbers [ *width*, *height* ] and returns this [[Operator]].
     */
    size(val: [number, number]): Operator<NodeType, Layering, Decross, Column, Coord, LayerSep, ColWidth, ColSep, HeightRat>;
    /**
     * Gets the current layout size, which defaults to [1, 1].
     */
    size(): [number, number];
    /**
     * Sets the layering accessor to the specified function and returns this
     * [[Operator]]. This is the same as [["sugiyama/layering/index" | sugiyama's
     * layering operators]].
     */
    layering<NewLayering extends LayeringOperator<NodeType>>(newLayering: NewLayering): Operator<NodeType, NewLayering, Decross, Column, Coord, LayerSep, ColWidth, ColSep, HeightRat>;
    /**
     * Get the current layering operator, which defaults to
     * `longestPath().topDown(fase)`.
     */
    layering(): Layering;
    /**
     * Sets the decrossing accessor to the specified function and returns this
     * [[Operator]]. This is the same as [["sugiyama/decross/index" | sugiyama's
     * decrossing operators]].
     */
    decross<NewDecross extends DecrossOperator<NodeType>>(newDecross: NewDecross): Operator<NodeType, Layering, NewDecross, Column, Coord, LayerSep, ColWidth, ColSep, HeightRat>;
    /**
     * Get the current decross operator, which defaults to `towLayer()`.
     */
    decross(): Decross;
    /**
     * Set the [[ColumnOperator]]. See [["arquint/column/index" | column
     * asignments]] for more information on column assignments and the built in
     * options.
     */
    column<NewColumn extends ColumnOperator<NodeType>>(newColumn: NewColumn): Operator<NodeType, Layering, Decross, NewColumn, Coord, LayerSep, ColWidth, ColSep, HeightRat>;
    /**
     * Get the current [[ColumnOperator]], which defaults to `complex()`.
     */
    column(): Column;
    /**
     * Set the [[CoordOperator]], which is distinct from sugiyama coordinate
     * assignment operators. See [["arquint/coord/index" | arquint coordinate
     * assignments]] for more information and built in options.
     */
    coord<NewCoord extends CoordOperator<NodeType>>(newCoord: NewCoord): Operator<NodeType, Layering, Decross, Column, NewCoord, LayerSep, ColWidth, ColSep, HeightRat>;
    /**
     * Get the current coordinate accessor.
     */
    coord(): Coord;
    /**
     * Set the current [[LayerSeparation]] to the supplied function.
     */
    layerSeparation<NewSep extends LayerSeparation<NodeType>>(newSep: NewSep): Operator<NodeType, Layering, Decross, Column, Coord, NewSep, ColWidth, ColSep, HeightRat>;
    /** Get the current layer separation which defaults to the constant 1. */
    layerSeparation(): LayerSep;
    /**
     * Sets the [[ColumnWidth]] to the supplied function.
     */
    columnWidth<NewWidth extends ColumnWidth>(newWidth: NewWidth): Operator<NodeType, Layering, Decross, Column, Coord, LayerSep, NewWidth, ColSep, HeightRat>;
    /** Get the current column width. */
    columnWidth(): ColWidth;
    /**
     * Sets the [[ColumnSeparation]] to the supplied function.
     */
    columnSeparation<NewSep extends ColumnSeparation>(newSep: NewSep): Operator<NodeType, Layering, Decross, Column, Coord, LayerSep, ColWidth, NewSep, HeightRat>;
    /** Get the current column separation. */
    columnSeparation(): ColSep;
}
/**
 * Construct a new Arquint layout operator with the default settings.
 */
export declare function arquint<NodeType extends DagNode>(): Operator<NodeType, LongestPathOperator<NodeType>, TwoLayerOperator<NodeType, MeanOperator<NodeType>>, ComplexOperator<NodeType>, SpreadOperator<NodeType>>;
export {};
