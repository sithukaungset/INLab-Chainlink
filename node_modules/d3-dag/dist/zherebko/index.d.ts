/**
 * This layout algorithm constructs a topological representation of the DAG
 * meant for visualization. The algorithm is based off a PR by D. Zherebko. The
 * nodes are topologically ordered, and edges are then positioned into "lanes"
 * to the left and right of the nodes.
 *
 * <img alt="zherebko example" src="media://zherebko.png" width="1000">
 *
 * @packageDocumentation
 */
import { Dag, DagNode, DagRoot } from "../dag/node";
/** @internal */
interface PartialNode {
    layer: number;
    x?: number;
    y?: number;
}
export interface ZherebkoNode extends PartialNode {
    x: number;
    y: number;
}
export interface ZherebkoOperator<NodeType extends DagNode> {
    /** Layout the input DAG. */
    (dag: NodeType): NodeType & ZherebkoNode;
    (dag: DagRoot<NodeType>): DagRoot<NodeType & ZherebkoNode>;
    (dag: Dag<NodeType>): Dag<NodeType & ZherebkoNode>;
    /**
     * Sets this zherebko layout's size to the specified two-element array of
     * numbers [ *width*, *height* ] and returns this [[ZherebkoOperator]]..
     */
    size(sz: [number, number]): ZherebkoOperator<NodeType>;
    /** Get the current size, which defaults to [1, 1]. */
    size(): [number, number];
}
/** Create a new [[ZherebkoOperator]] with default settings. */
export declare function zherebko<NodeType extends DagNode>(...args: never[]): ZherebkoOperator<NodeType>;
export {};
